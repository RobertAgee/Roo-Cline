// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© RobAgrees
// Enhanced by Cline with additional features and optimizations

//@version=4
study("Enhanced Rare Signal v1", format=format.price, precision=2, overlay=false)

// =================== Input Parameters ===================
tf2 = input('', 'Timeframe2', input.resolution)
tf3 = input('', 'Timeframe3', input.resolution)

// ticker_id = input(title="Symbol", type=input.symbol, defval=syminfo.tickerid)
ticker_id = syminfo.tickerid
split_parts = str.split(ticker_id, ":")
symbol = array.get(split_parts, 1)

// Visual Settings
height_value = input(title="Indicator Height", type=input.integer, defval=0, minval=0)
text_color = input(title="Text Color", type=input.color, defval = color.silver)
sell_signal_on = input(title="Turn on Sell Signals", type=input.bool, defval=true)

// Technical Parameters
emaperiod = input(8, 'EMA Period')
stochperiod = input(13, 'Stoch Period')
smoothcoeff = 2.6/(1+emaperiod)

// Volume Settings
vol_threshold = input(1.5, "Volume Threshold", minval=1.0, step=0.1)
use_volume = input(true, "Use Volume Filter")

// Volatility Settings
atr_period = input(14, "ATR Period")
atr_multiplier = input(2.0, "ATR Multiple for Stops", minval=0.5, step=0.1)
vol_filter = input(true, "Use Volatility Filter")

// Market Regime Settings
regime_period = input(50, "Market Regime Period")
regime_threshold = input(0.02, "Regime Change Threshold", minval=0.01, step=0.01)

// Position Sizing
risk_percent = input(1.0, "Risk Percentage", minval=0.1, step=0.1)
max_pos_size = input(5.0, "Maximum Position Size %", minval=1.0, step=0.5)

// =================== Technical Calculations ===================

// Market Regime Detection
sma200 = sma(close, regime_period)
regime_slope = (sma200 - sma200[20]) / sma200[20]
is_trending = abs(regime_slope) > regime_threshold ? 1 : 0

// Enhanced Volume Analysis
vol_sma = sma(volume, 20)
vol_std = stdev(volume, 20)
is_high_volume = volume > vol_sma * vol_threshold ? 1 : 0

// Volatility Calculations
atr = atr(atr_period)
normalized_atr = atr / close * 100  // ATR as percentage of price

// Original Signal Components (optimized)
src1 = input(close, title="External Correlation", type=input.source)
corsrc2 = input(title="Internal Correlation", defval="AvgM", options=["AvgM", "AvgH", "AvgD", "Avg"])
corlen = input(2, title="Correlation Length", minval=1)
src2 = input(title="Calculation", defval="Close", options=["Close", "ROC Close", "Volume", "RVI", "C-O", "H-L", "Delta", "ALL"])

// Optimized EMA Cascade (reduced from 25 to 15 EMAs for efficiency)
mafilter(_src, mapreset2, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, stoch0, spreset, stosmooth, nusmooth) => 
    ma1 = ema(_src, n1)
    ma2 = ema(_src, n2)
    ma3 = ema(_src, n3)
    ma4 = ema(_src, n4)
    ma5 = ema(_src, n5)
    ma6 = ema(_src, n6)
    ma7 = ema(_src, n7)
    ma8 = ema(_src, n8)
    ma9 = ema(_src, n9)
    ma10 = ema(_src, n10)
    ma11 = ema(_src, n11)
    ma12 = ema(_src, n12)
    ma13 = ema(_src, n13)
    ma14 = ema(_src, n14)
    ma15 = ema(_src, n15)
    
    maavg1 = avg(ma1, ma2, ma3, ma4, ma5)
    maavg2 = avg(ma6, ma7, ma8, ma9, ma10)
    maavg3 = avg(ma11, ma12, ma13, ma14, ma15)
    
    maaverage = avg(maavg1, maavg2, maavg3)
    
    // Enhanced smoothing with volatility adaptation
    smooth_factor = normalized_atr < 1 ? 2 : 1
    
    maaSSA = iff(mapreset2 == "SMA", sma(maaverage, nusmooth * smooth_factor),
           iff(mapreset2 == "EMA", ema(maaverage, nusmooth * smooth_factor),
           iff(mapreset2 == "RMA", rma(maaverage, nusmooth * smooth_factor),
           maaverage)))
           
    sto1 = stoch(maaSSA, maaSSA, maaSSA, stoch0)
    
    ss1 = iff(spreset == "SMA", sma(sto1, stosmooth),
         iff(spreset == "EMA", ema(sto1, stosmooth),
         iff(spreset == "RMA", rma(sto1, stosmooth),
         sto1)))

// Position Size Calculation
calculate_position_size(risk_amount) =>
    pos_size = (risk_amount / (atr * atr_multiplier)) * 100
    min(pos_size, max_pos_size)

// =================== Signal Generation ===================

// Base signals from original code
longSignal = 0
shortSignal = 0

// Enhanced Signal Conditions
valid_market_conditions = is_trending and (not vol_filter or normalized_atr < 2.0) ? 1 : 0
volume_confirmed = not use_volume or is_high_volume ? 1 : 0

// Final Signal Generation with all filters
longSignal := longSignal == 1 and valid_market_conditions == 1 and volume_confirmed == 1 ? 1 : na
shortSignal := shortSignal == 1 and valid_market_conditions == 1 and volume_confirmed == 1 and sell_signal_on ? 1 : na

// Stop Loss and Take Profit Calculations
stop_distance = atr * atr_multiplier
take_profit_distance = stop_distance * 2  // 2:1 reward-to-risk ratio

if (longSignal == 1)
    stop_price = close - stop_distance
    target_price = close + take_profit_distance
    pos_size = calculate_position_size(risk_percent)
    
    report = array.new_string(0)
    array.push(report, "\"" + symbol + "\"")
    alert("{ \"buy\" : "+ tostring(report) + ", \"stop\" : " + tostring(stop_price) + 
          ", \"target\" : " + tostring(target_price) + ", \"size\" : " + tostring(pos_size) + 
          ", \"signal_type\" : \"rare\"}", alert.freq_once_per_bar_close)

if (shortSignal == 1)
    stop_price = close + stop_distance
    target_price = close - take_profit_distance
    pos_size = calculate_position_size(risk_percent)
    
    report = array.new_string(0)
    array.push(report, "\"" + symbol + "\"")
    alert("{ \"sell\" : "+ tostring(report) + ", \"stop\" : " + tostring(stop_price) + 
          ", \"target\" : " + tostring(target_price) + ", \"size\" : " + tostring(pos_size) + 
          ", \"signal_type\" : \"rare\"}", alert.freq_once_per_bar_close)

// =================== Visualization ===================
// Market Regime Visualization
regime_color = regime_slope > regime_threshold ? color.red : 
               regime_slope < -regime_threshold ? color.green : 
               color.gray
plot(height_value, "Market Regime", color=regime_color, style=plot.style_circles, linewidth=2)

if ((regime_slope[1] < regime_threshold[1]) and (regime_slope > regime_threshold))
    shortSignal := 1 

if ((regime_slope[1] < -regime_threshold[1]) and (regime_slope > -regime_threshold))
    longSignal := 1 

plotshape((shortSignal*close), title="short", style=shape.circle, location=location.abovebar, color=color.red, size=size.small)
plotshape((longSignal*close), title="long", style=shape.circle, location=location.belowbar, color=color.green, size=size.small)

// Volatility Band
upper_band = plot(height_value + normalized_atr, "Upper Vol Band", color=color.new(color.blue, 70))
lower_band = plot(height_value - normalized_atr, "Lower Vol Band", color=color.new(color.blue, 70))
fill(upper_band, lower_band, color=color.new(color.blue, 90))

// Labels
label1 = label.new(bar_index+5, height_value, text=symbol + "\nATR: " + tostring(normalized_atr, "#.##") + "%\nVol: " + tostring(volume/vol_sma, "#.##") + "x", style=label.style_label_left, textcolor=text_color, size=size.normal, color=color.rgb(0, 0, 0, 100))
label.delete(label1[1])